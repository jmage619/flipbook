#!/usr/bin/env python3

import sys
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QWidget
from PyQt5.QtWidgets import QVBoxLayout
from PyQt5.QtGui import QPixmap
from PyQt5.QtGui import QPainter
from PyQt5.QtCore import QTimer
from PyQt5.QtCore import QRectF
from PyQt5.QtCore import Qt
from PyQt5.QtSvg import QSvgRenderer

class Animation(QWidget):
  def __init__(self):
    super().__init__()
    self.renderer = QSvgRenderer(self)
    self.path = None
    #self.img = QPixmap("steve.png")
    self.img = None
    self.index = 0
    self.nrows = -1
    self.cur_row = 0
    self.max_frames = -1
    self.nframes = 1
    self.cell_w = -1
    self.cell_h = -1
    self.timer = QTimer(self)
    self.timer.timeout.connect(self.incAndUpdate)

  # assume svg for now
  def load(self, path, nrows, max_frames):
    self.nrows = nrows
    self.max_frames = max_frames
    self.path = path
    self.renderer.load(path)
    self.img = QPixmap(self.renderer.defaultSize())
    self.img.fill(Qt.transparent)
    painter = QPainter(self.img)
    self.renderer.render(painter, QRectF(self.img.rect()))

    self.cell_w = self.img.width() / max_frames
    self.cell_h = self.img.height() / nrows

  def paintEvent(self, evt):
    if self.img is not None:
      painter = QPainter(self)
      painter.drawPixmap(0, 0, self.img, self.index * self.cell_w,
        self.cur_row * self.cell_h, self.cell_w, self.cell_h)

  def incAndUpdate(self):
    self.index = (self.index + 1) % self.nframes

    self.update()

class Window(QWidget):
  def __init__(self):
    super().__init__()

    self.setGeometry(0, 0, 500, 300)
    self.setWindowTitle("Fuck")

    vbox = QVBoxLayout()

    animation = Animation()
    vbox.addWidget(animation)
    self.setLayout(vbox)

    animation.load('steve.svg', 4, 8)
    animation.nframes = 4
    animation.timer.start(100)

if __name__ == '__main__':
  app = QApplication(sys.argv)
  window = Window()

  window.show()
  sys.exit(app.exec_())
