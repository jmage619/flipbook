#!/usr/bin/env python3

import sys
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QWidget
from PyQt5.QtWidgets import QLabel
from PyQt5.QtWidgets import QLineEdit
from PyQt5.QtWidgets import QVBoxLayout
from PyQt5.QtWidgets import QHBoxLayout
from PyQt5.QtWidgets import QPushButton
from PyQt5.QtWidgets import QDialog
from PyQt5.QtWidgets import QDialogButtonBox
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QSpinBox
from PyQt5.QtGui import QPixmap
from PyQt5.QtGui import QPainter
from PyQt5.QtCore import QTimer
from PyQt5.QtCore import QRectF
from PyQt5.QtCore import Qt
from PyQt5.QtSvg import QSvgRenderer

class Animation(QWidget):
  def __init__(self):
    super().__init__()
    self.renderer = QSvgRenderer(self)
    self.path = None
    #self.img = QPixmap("steve.png")
    self.img = None
    self.index = 0
    self.nrows = -1
    self.cur_row = 0
    self.max_frames = -1
    self.nframes = 1
    self.cell_w = -1
    self.cell_h = -1
    self.timer = QTimer(self)
    self.timer.timeout.connect(self.incAndUpdate)
    self.setMinimumHeight(200)

  def loadImg(self):
    self.renderer.load(self.path)
    self.img = QPixmap(self.renderer.defaultSize())
    self.img.fill(Qt.transparent)
    painter = QPainter(self.img)
    self.renderer.render(painter, QRectF(self.img.rect()))

  # assume svg for now
  def load(self, path, nrows, max_frames):
    self.nrows = nrows
    self.max_frames = max_frames
    self.path = path
    self.loadImg()

    self.cell_w = self.img.width() / max_frames
    self.cell_h = self.img.height() / nrows

  def paintEvent(self, evt):
    if self.img is not None:
      painter = QPainter(self)
      painter.drawPixmap(0, 0, self.img, self.index * self.cell_w,
        self.cur_row * self.cell_h, self.cell_w, self.cell_h)

  def incAndUpdate(self):
    if self.index >= self.nframes - 1:
      self.index = 0
    else:
      self.index += 1

    self.update()

  def decAndUpdate(self):
    if self.index == 0:
      self.index = self.nframes - 1
    else:
      self.index -= 1
      # correct if updated value out of bounds
      # because nframes decreased before this call
      if self.index >= self.nframes:
        self.index = self.nframes -1

    self.update()

class LoadDialog(QDialog):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)

    # file selection
    vbox = QVBoxLayout()
    hbox = QHBoxLayout()
    self.file_box = QLineEdit('<choose>')
    self.file_box.setReadOnly(True)
    self.file_box.setMinimumWidth(300)
    hbox.addWidget(self.file_box)
    file_button = QPushButton('file')
    hbox.addWidget(file_button)
    vbox.addLayout(hbox)

    # row count
    hbox = QHBoxLayout()
    hbox.addStretch()
    label = QLabel('row count:')
    hbox.addWidget(label)
    self.row_box = QLineEdit()
    self.row_box.setMaximumWidth(40)
    hbox.addWidget(self.row_box)
    vbox.addLayout(hbox)

    # max frame
    hbox = QHBoxLayout()
    hbox.addStretch()
    label = QLabel('max frames:')
    hbox.addWidget(label)
    self.frame_box = QLineEdit()
    self.frame_box.setMaximumWidth(40)
    hbox.addWidget(self.frame_box)
    vbox.addLayout(hbox)

    # ok cancel buttons
    buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
    vbox.addWidget(buttons)
    self.setLayout(vbox)
    buttons.accepted.connect(self.accept)
    buttons.rejected.connect(self.reject)
    file_button.clicked.connect(self.selectFile)

  def selectFile(self):
    path = QFileDialog.getOpenFileName(self, "Open Spriteheet", "", "Sprite Sheets (*.svg)")[0]
    if path != "":
      self.file_box.setText(path)

  # no validation whatsoever right now
  def getValues(self):
    return (self.file_box.text(), int(self.row_box.text()), int(self.frame_box.text()))

class Window(QWidget):
  def __init__(self):
    super().__init__()

    vbox = QVBoxLayout()

    # animation screen
    self.animation = Animation()
    vbox.addWidget(self.animation)

    # load and reload buttons
    hbox = QHBoxLayout()
    hbox.addStretch()
    load_button = QPushButton("Load")
    hbox.addWidget(load_button)
    reload_button = QPushButton("Reload")
    hbox.addWidget(reload_button)
    vbox.addLayout(hbox)

    hbox = QHBoxLayout()
    hbox.addStretch()

    # row box
    label = QLabel()
    label.setText('row:')
    hbox.addWidget(label)
    self.row_box = QSpinBox()
    self.row_box.setMinimum(0)
    self.row_box.setValue(0)
    self.row_box.setMinimumWidth(70)
    hbox.addWidget(self.row_box)

    # nframe box
    label = QLabel()
    label.setText('n frames:')
    hbox.addWidget(label)
    self.nframe_box = QSpinBox()
    self.nframe_box.setMinimum(1)
    self.nframe_box.setValue(1)
    self.nframe_box.setMinimumWidth(70)
    hbox.addWidget(self.nframe_box)
    vbox.addLayout(hbox)

    # frame len box
    hbox = QHBoxLayout()
    hbox.addStretch()
    label = QLabel()
    label.setText('frame length (ms):')
    hbox.addWidget(label)
    self.speed_box = QSpinBox()
    self.speed_box.setMinimum(10)
    self.speed_box.setMaximum(1000)
    self.speed_box.setValue(100)
    self.speed_box.setSingleStep(10)
    self.speed_box.setMinimumWidth(70)
    hbox.addWidget(self.speed_box)
    vbox.addLayout(hbox)

    # play left and right buttons
    hbox = QHBoxLayout()
    hbox.addStretch()
    self.play_button = QPushButton("Play")
    self.play_button.setCheckable(True)
    hbox.addWidget(self.play_button)

    self.prev_button = QPushButton("<")
    hbox.addWidget(self.prev_button)

    self.next_button = QPushButton(">")
    hbox.addWidget(self.next_button)

    vbox.addLayout(hbox)

    self.setLayout(vbox)

    load_button.clicked.connect(self.launchLoad)
    reload_button.clicked.connect(self.reload)
    self.row_box.valueChanged.connect(self.updateRow)
    self.nframe_box.valueChanged.connect(self.updateFrameCount)
    self.speed_box.valueChanged.connect(self.updateSpeed)
    self.play_button.toggled.connect(self.play)
    self.prev_button.clicked.connect(self.prevFrame)
    self.next_button.clicked.connect(self.nextFrame)

  def launchLoad(self):
    dialog = LoadDialog(self)
    if dialog.exec() == QDialog.Accepted:
      values = dialog.getValues()
      self.animation.load(*values)
      self.row_box.setMaximum(values[1])
      self.nframe_box.setMaximum(values[2])
      self.nframe_box.setValue(values[2])

  def reload(self):
    self.animation.loadImg()
    self.animation.update()

  def updateRow(self, val):
    self.animation.cur_row = val
    self.animation.update()

  def updateFrameCount(self, val):
    self.animation.nframes = val

  def updateSpeed(self, val):
    if self.animation.timer.isActive():
      self.animation.timer.start(val)

  def play(self, playing):
    if playing:
      self.animation.timer.start(self.speed_box.value())
      self.play_button.setText("Stop")
    else:
      self.animation.timer.stop()
      self.play_button.setText("Play")

  def nextFrame(self):
    self.animation.incAndUpdate()

  def prevFrame(self):
    self.animation.decAndUpdate()

if __name__ == '__main__':
  app = QApplication(sys.argv)
  window = Window()

  window.show()
  sys.exit(app.exec_())
